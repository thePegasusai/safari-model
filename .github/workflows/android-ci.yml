name: Android CI

# Trigger workflow on push and pull requests to main and develop branches
# Only when changes are made to Android or ML model files
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/android/**'
      - 'ml-models/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/android/**'
      - 'ml-models/**'

# Environment variables from technical specification
env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.1.0'
  ANDROID_MIN_SDK: '24'
  ANDROID_TARGET_SDK: '34'

jobs:
  validate:
    name: Validate Project
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Verify ML Model Assets
        run: |
          if [ ! -d "src/android/app/src/main/assets/ml-models" ]; then
            echo "ML model assets directory not found!"
            exit 1
          fi

  build:
    name: Build and Analyze
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Static Code Analysis
        run: |
          ./gradlew detekt
          ./gradlew lint
          
      - name: Run Unit Tests
        run: ./gradlew test
        
      - name: Security Scan
        uses: aquasecurity/trivy-action@0.11.2
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Build Release APK
        run: ./gradlew assembleRelease
        
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-artifacts
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/release/*.apk
            
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: app/build/reports

  test:
    name: Instrumented Tests
    needs: build
    runs-on: macos-latest
    timeout-minutes: 45
    strategy:
      matrix:
        api-level: [29, 31, 34]
        
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Run Instrumented Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          profile: pixel_6
          script: |
            ./gradlew connectedCheck
            ./gradlew connectedAndroidTest

      - name: Validate ML Model Performance
        if: matrix.api-level == 31
        run: ./gradlew validateMLModels
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: instrumented-test-results-api-${{ matrix.api-level }}
          path: app/build/reports/androidTests

  deploy:
    name: Deploy to Play Store
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Download APK Artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-artifacts
          
      - name: Deploy to Play Store
        run: |
          echo "Deploying to Play Store..."
          # Add Play Store deployment steps here
          # Using Google Play Developer API