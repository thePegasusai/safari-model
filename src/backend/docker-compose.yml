version: "3.8"

services:
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "1"
          memory: 2GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - auth_service
      - collection_service
      - detection_service
      - sync_service
    networks:
      - backend

  auth_service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_OPTS=-XX:MaxRAMPercentage=75.0 -XX:InitialRAMPercentage=50.0 -XX:+UseG1GC
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "2"
          memory: 4GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis
    networks:
      - backend

  detection_service:
    build:
      context: .
      dockerfile: Dockerfile.detection
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "4"
          memory: 8GB
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
    networks:
      - backend

  collection_service:
    build:
      context: .
      dockerfile: Dockerfile.collection
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "2"
          memory: 4GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis
    networks:
      - backend

  sync_service:
    build:
      context: .
      dockerfile: Dockerfile.sync
    ports:
      - "8080:8080"
    environment:
      - CGO_ENABLED=0
      - PORT=8080
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "2"
          memory: 4GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - backend

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=wildlife_safari
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4GB
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2GB
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2GB
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  backend:
    driver: overlay
    attachable: true
    name: wildlife_safari_network