apiVersion: apps/v1
kind: Deployment
metadata:
  name: detection-service
  namespace: wildlife-safari
  labels:
    app: detection-service
    component: ml-processing
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: detection-service
      component: ml-processing
      tier: backend
  template:
    metadata:
      labels:
        app: detection-service
        component: ml-processing
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        kubernetes.io/gpu-enabled: "true"
        checksum/config: ${CONFIG_CHECKSUM}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: detection-service
        image: wildlife-safari/detection-service:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 8000
          protocol: TCP
          name: http
        - containerPort: 9090
          protocol: TCP
          name: metrics
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
            nvidia.com/gpu: "1"
          limits:
            cpu: "4"
            memory: "8Gi"
            nvidia.com/gpu: "1"
        env:
        - name: PORT
          value: "8000"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: detection-service-config
              key: LOG_LEVEL
        - name: ML_MODEL_LAYER_SIZE
          value: "1024"
        - name: GPU_ENABLED
          value: "true"
        - name: MODEL_BATCH_SIZE
          value: "32"
        - name: INPUT_RESOLUTION
          value: "640x640"
        - name: TZ
          value: "UTC"
        envFrom:
        - configMapRef:
            name: detection-service-config
        - secretRef:
            name: detection-service-secrets
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
          readOnly: true
        - name: cache
          mountPath: /app/cache
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 40
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: detection-model-pvc
      - name: cache
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu
                operator: Exists
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - detection-service
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule