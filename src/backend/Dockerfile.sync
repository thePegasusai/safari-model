# Stage 1: Builder
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    build-base

# Set working directory
WORKDIR /app

# Set build environment variables for optimization
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64 \
    GO111MODULE=on

# Copy go mod files first for better layer caching
COPY sync-service/go.mod sync-service/go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY sync-service/ ./

# Build the application with security flags
RUN go build \
    -ldflags="-w -s -buildid='' -extldflags '-static'" \
    -o /go/bin/sync-service \
    ./cmd/sync

# Stage 2: Runtime
FROM alpine:3.18

# Add runtime dependencies and security updates
RUN apk add --no-cache \
    ca-certificates \
    tzdata && \
    update-ca-certificates

# Create non-root user and group
RUN addgroup -S appgroup && \
    adduser -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /go/bin/sync-service .

# Set secure permissions
RUN chown -R appuser:appgroup /app && \
    chmod 550 /app/sync-service

# Set environment variables
ENV PORT=8080 \
    GIN_MODE=release

# Switch to non-root user
USER appuser

# Expose service port
EXPOSE 8080

# Configure health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set resource limits
ENV GOMAXPROCS=2
LABEL org.opencontainers.image.memory.limit="4GB"
LABEL org.opencontainers.image.pids.limit="100"
LABEL org.opencontainers.image.ulimits.nofile="1024"

# Add metadata labels
LABEL maintainer="Wildlife Safari Team" \
      version="1.0.0" \
      description="Wildlife Safari Sync Service" \
      build_date="${BUILD_DATE}" \
      vcs_ref="${VCS_REF}"

# Start the service
ENTRYPOINT ["/app/sync-service"]